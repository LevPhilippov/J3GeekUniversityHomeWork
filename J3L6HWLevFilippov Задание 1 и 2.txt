//1. Написать метод, которому в качестве аргумента передается не пустой одномерный целочисленный массив.
// Метод должен вернуть новый массив, который получен путем вытаскивания из исходного массива элементов,
// идущих после последней четверки. Входной массив должен содержать хотя бы одну четверку, иначе в методе
// необходимо выбросить RuntimeException. Написать набор тестов для этого метода (по 3-4 варианта входных данных).
// Вх: [ 1 2 4 4 2 3 4 1 7 ] -> вых: [ 1 7 ].
package lev.filippov;

import java.util.Arrays;

public class MainTestApp {

    public static int[] findFour(int[] originArray) {
        int lastFourIndex = -1;
        boolean isContainsFour = false;
        for (int i = 0; i < originArray.length; i++) {
            if (originArray[i] == 4) {
                if (!isContainsFour) isContainsFour = true;
                lastFourIndex = i;
            }
        }
            if (isContainsFour) return Arrays.copyOfRange(originArray, lastFourIndex+1, originArray.length);
            throw new RuntimeException();
    }

    /*Написать метод, который проверяет состав массива из чисел 1 и 4.
Если в нем нет хоть одной четверки или единицы, то метод вернет false;
Написать набор тестов для этого метода (по 3-4 варианта входных данных).*/

    public static boolean fourAndOne(int[] array) {
        boolean isOne = false;
        boolean isFour = false;
        for (int o: array) {
            if (!isOne && o == 1) { isOne = true;
                continue;
            }
            if (!isFour && o == 4) {
                isFour = true;
                continue;
            }
            if(isFour && isOne) return true;
        }
        return false;
    }
}


В папке тест:

import lev.filippov.MainTestApp;
import org.junit.Assert;
import org.junit.Test;

public class TestArray {
    @Test
    public void test1(){
        Assert.assertArrayEquals(new int[]{1, 7}, MainTestApp.findFour(new int[] {1,2,4,4,2,3,4,1,7}));
    }
    @Test (expected = RuntimeException.class)
    public void test2(){
        MainTestApp.findFour(new int[] {1,2,5,5,2,3,5,1,7});
    }

    @Test
    public void test3 () {
        Assert.assertTrue(MainTestApp.fourAndOne(new int[] {1,2,4,4,2,3,4,1,7}));
        Assert.assertArrayEquals(new boolean[]{false}, new boolean[] {MainTestApp.fourAndOne(new int[] {3,2,5,5,2,3,7,3,7})});
    }

}


import lev.filippov.MainTestApp;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.util.Arrays;
import java.util.Collection;

@RunWith(Parameterized.class)
public class ParametrizedTestArray {
    @Parameterized.Parameters
    public static Collection <int[][]> data() {
        return Arrays.asList(new int[][][] {
                {{1,7}, {1,2,4,4,2,3,4,1,7}},
                {{32,757,1223},{5,4,8,13,66,123,8678,4,767,321,4,32,757,1223}},
                {{8,8568,25,12,56,123},{4,67,234,865,4,8,8568,25,12,56,123}},
                {{}, {123,6,4,654,76,4}}
        });
    }

    int[] a;
    int[] b;

    public ParametrizedTestArray(int[] a, int[] b) {
        this.a = a;
        this.b = b;
    }

    @Test
    public void test1(){
        Assert.assertArrayEquals(a, MainTestApp.findFour(b));
    }

}


